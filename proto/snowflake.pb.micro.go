// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/snowflake.proto

package proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for ID service

func NewIDEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for ID service

type IDService interface {
	GetSnowflakeID(ctx context.Context, in *SnowIDReq, opts ...client.CallOption) (*SnowIDResp, error)
	ParseSnowflakeID(ctx context.Context, in *PraseIDReq, opts ...client.CallOption) (*PraseIDResp, error)
}

type iDService struct {
	c    client.Client
	name string
}

func NewIDService(name string, c client.Client) IDService {
	return &iDService{
		c:    c,
		name: name,
	}
}

func (c *iDService) GetSnowflakeID(ctx context.Context, in *SnowIDReq, opts ...client.CallOption) (*SnowIDResp, error) {
	req := c.c.NewRequest(c.name, "ID.GetSnowflakeID", in)
	out := new(SnowIDResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iDService) ParseSnowflakeID(ctx context.Context, in *PraseIDReq, opts ...client.CallOption) (*PraseIDResp, error) {
	req := c.c.NewRequest(c.name, "ID.ParseSnowflakeID", in)
	out := new(PraseIDResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ID service

type IDHandler interface {
	GetSnowflakeID(context.Context, *SnowIDReq, *SnowIDResp) error
	ParseSnowflakeID(context.Context, *PraseIDReq, *PraseIDResp) error
}

func RegisterIDHandler(s server.Server, hdlr IDHandler, opts ...server.HandlerOption) error {
	type iD interface {
		GetSnowflakeID(ctx context.Context, in *SnowIDReq, out *SnowIDResp) error
		ParseSnowflakeID(ctx context.Context, in *PraseIDReq, out *PraseIDResp) error
	}
	type ID struct {
		iD
	}
	h := &iDHandler{hdlr}
	return s.Handle(s.NewHandler(&ID{h}, opts...))
}

type iDHandler struct {
	IDHandler
}

func (h *iDHandler) GetSnowflakeID(ctx context.Context, in *SnowIDReq, out *SnowIDResp) error {
	return h.IDHandler.GetSnowflakeID(ctx, in, out)
}

func (h *iDHandler) ParseSnowflakeID(ctx context.Context, in *PraseIDReq, out *PraseIDResp) error {
	return h.IDHandler.ParseSnowflakeID(ctx, in, out)
}
